#!/bin/sh

set -e
PATH=/usr/sbin:/usr/bin:/sbin:/bin
export PATH

INITRAMFS_DIR="$(mktemp -d --tmpdir=/run/shm)"
INITRAMFS_DIR="$(readlink -f "$INITRAMFS_DIR")"
BIND_PATHS="/sys /proc /dev /run"

mount_initramfs() {
    local INITRAMFS=$(sed -n 's/.*BOOT_IMAGE=.*vmlinuz-\([^: ]*\).*$/\/boot\/initrd.img-\1/p' /proc/cmdline)
    if [ ! -f "$INITRAMFS" ]; then
        echo "Error: No initramfs found at $INITRAMFS" >&1
        exit 1
    fi

    # disable swap, so tmpfs is in RAM
    swapoff -a

    # Limit tmpfs size to 200 MB, RAM is precious now
    mount -t tmpfs -o mode=0755,size=200m tmpfs "$INITRAMFS_DIR"

    # extract initrd.img to initramfs dir
    unmkinitramfs "${INITRAMFS}" "${INITRAMFS_DIR}"

    for p in $BIND_PATHS; do
        mkdir -p -m 0755 "$INITRAMFS_DIR$p"
        mount -o bind $p "$INITRAMFS_DIR$p"
    done
}

umount_initramfs() {
    # recursively unmount
    umount -R "$INITRAMFS_DIR"
    rmdir "$INITRAMFS_DIR"

    # re-enable swap
    swapon -a
}

CGROUP_FREEZER=
freeze_cgroups() {
    # add all machines/containers and user cgroups
    CGROUPS="/sys/fs/cgroup/unified/machine.slice/cgroup.freeze \
        /sys/fs/cgroup/unified/user.slice/cgroup.freeze"

    # add all system cgroups but us
    CGROUPS_SYSTEM=$(find /sys/fs/cgroup/unified/system.slice/ -mindepth 2 -maxdepth 2 -name cgroup.freeze)

    # freeze all unfrozen cgroups
    for c in $CGROUPS $CGROUPS_SYSTEM; do
        local val=1
        if [ -f "$c" ]; then
            val=$(cat "$c")
        fi

        # get my second level cgroup
        MY_CGROUP=$(cat /proc/self/cgroup | grep "0::" | awk -F "/" '{print $3}')

        # dont freeze our cgroup, systemd-suspend/udevd or frozen cgroups
        # freezing udevd blocks luksResume
        if echo -n "$c" | grep -qvE "systemd-suspend|systemd-udev|$MY_CGROUP" && [ 0 -eq "$val" ]; then
            echo 1 > "$c"
            CGROUP_FREEZER="$c $CGROUP_FREEZER"
        fi
    done
}

thaw_cgroups() {
    for c in $CGROUP_FREEZER; do
       echo 0 > "$c"
    done
}

CRYPTNAME=
get_cryptroot() {
    local device="$(readlink -f "$1")" s name
    [ "${device#/dev/dm-}" != "$device" ] || return
    device="${device#/dev/}"

    name=$(cat "/sys/block/$device/dm/name")
    if dmsetup table "$name" | grep -Eq '^([0-9]+\s+){2}crypt\s'; then
        #XXX can have multiple devices
        CRYPTNAME="$name"
    else
        for s in "/sys/block/$device/slaves"/*; do
            get_cryptroot "/dev/${s#/sys/block/$device/slaves/}"
        done
    fi
}

# Stop udev service and prevent it to be autostarted.
# Otherwise, luksResume will hang waiting for udev, which is itself waiting
# for I/O on the root device.
udev_service() {
    systemctl "$1" systemd-udevd-control.socket
    systemctl "$1" systemd-udevd-kernel.socket
    systemctl "$1" systemd-udevd.service
}

clean_up() {
    # thaw all frozen cgroups
    thaw_cgroups

    # restore original barrier mount options
    if [ -n "$BARRIER" ]; then
        mount -o remount,barrier "$BARRIER"
    fi

    # restart systemd-udevd
    udev_service start

    umount_initramfs
}

## Main script

# check unified cgroups hierarchy
if [ ! -d /sys/fs/cgroup/unified/system.slice/ ]; then
    echo "Error: No unified cgroups hierarchy" >&1
    exit 1
fi

# check that not run as user
# XXX: We should catch also cases where libpam-systemd is not installed
if cat /proc/self/cgroup | grep -q "user.slice"; then
    echo "Error: Don't run this script as user" >&1
    exit 1
fi

# always thaw cgroups, re-mount filesystems and remove initramfs at the end of the script
trap clean_up EXIT

# extract temporary filesystem to switch to
mount_initramfs

# copy our binary to ramdisk
cp /lib/cryptsetup/scripts/cryptroot-suspend "$INITRAMFS_DIR/bin/cryptroot-suspend"

# freezing of udevd was not possible, but it still blocks sometimes
udev_service stop

# Journalled ext4 filesystems in kernel versions 3.11+ will block suspend
# if mounted with `barrier=1`, which is the default. Temporarily remount with
# `barrier=0` if this is true of the crypt fs.
BARRIER=
while read device mountpoint type options; do
    if [ "$mountpoint" = / ]; then
        if [ -z "${type#ext[2-4]}" ] && \
                ! printf '%s' "$options" | tr , '\n' | \
                    grep -qFx -e barrier=0 -e nobarrier; then
            mount -o remount,nobarrier "$mountpoint"
            BARRIER="$mountpoint"
        fi
        get_cryptroot "$device"
        break
    fi
done </proc/mounts

# freeze all cgroups but us
freeze_cgroups

# change into ramdisk
chroot "$INITRAMFS_DIR" /bin/sh -c "
    # suspend
    /bin/cryptroot-suspend \"$CRYPTNAME\"
    # continue here after suspend
    # check if device is really suspended
    if dmsetup info \"$CRYPTNAME\" | grep 'State:' | grep -q ACTIVE; then
        echo ERROR: Device was not suspendend successfully
        sleep 5
        exit
    fi
    # retry eternally to re-open cryptroot
    while ! cryptsetup luksResume \"$CRYPTNAME\"; do sleep 1; done
"
