#!/bin/sh

set -e
PATH=/usr/sbin:/usr/bin:/sbin:/bin
export PATH

INITRAMFS_DIR="$(mktemp -d --tmpdir=/run/shm)"
INITRAMFS_DIR="$(readlink -f "$INITRAMFS_DIR")"
BIND_PATHS="/sys /proc /dev /run"

mount_initramfs() {
    local INITRAMFS=`sed -n 's/.*BOOT_IMAGE=.*vmlinuz-\([^: ]*\).*$/\/boot\/initrd.img-\1/p' /proc/cmdline`
    mkdir -p  ${INITRAMFS_DIR}
    mount -t tmpfs -o size=512m tmpfs ${INITRAMFS_DIR}

    if file -L ${INITRAMFS} | grep -q "ASCII cpio archive"; then
        # extract hybrid initrd.img to initramfs dir
        (cd ${INITRAMFS_DIR} && dd if="${INITRAMFS}" of="${INITRAMFS_DIR}/initrd.img.gz" bs=512 skip=$(cpio -id < "${INITRAMFS}" 2>&1 | grep blocks | cut -d" " -f1) ; zcat "${INITRAMFS_DIR}/initrd.img.gz" | cpio -id ; rm "${INITRAMFS_DIR}/initrd.img.gz")
    else
        # extract plain initrd.img to initramfs dir
        cd ${INITRAMFS_DIR} &&  zcat ${INITRAMFS} | cpio -id
    fi

    for p in ${BIND_PATHS}; do
        mkdir -p "${INITRAMFS_DIR}${p}"
        mount -o bind ${p} "${INITRAMFS_DIR}${p}"
    done
}

umount_initramfs() {
    local p
    for p in ${BIND_PATHS}; do
        ! mountpoint -q "${INITRAMFS_DIR}${p}" || (umount "${INITRAMFS_DIR}${p}" && rmdir "${INITRAMFS_DIR}${p}")
    done
    umount -R "${INITRAMFS_DIR}"
    rmdir "${INITRAMFS_DIR}"
}

CRYPTNAME=
get_cryptroot() {
    local device="$(readlink -f "$1")" s name
    [ "${device#/dev/dm-}" != "$device" ] || return
    device="${device#/dev/}"

    name=$(cat "/sys/block/$device/dm/name")
    if dmsetup table "$name" | grep -Eq '^([0-9]+\s+){2}crypt\s'; then
        #XXX can have multiple devices
        CRYPTNAME="$name"
    else
        for s in "/sys/block/$device/slaves"/*; do
            get_cryptroot "/dev/${s#/sys/block/$device/slaves/}"
        done
    fi
}

## Main script
# always remove initramfs at the end of the script
trap umount_initramfs EXIT

# extract temporary filesystem to switch to
mount_initramfs

# copy our binary to ramdisk
cp /lib/cryptsetup/scripts/cryptroot-suspend ${INITRAMFS_DIR}/bin/cryptroot-suspend

# Journalled ext4 filesystems in kernel versions 3.11+ will block suspend
# if mounted with `barrier=1`, which is the default. Temporarily remount with
# `barrier=0` if this is true of the crypt fs.
BARRIER=
while read device mountpoint type options; do
    if [ "$mountpoint" = / ]; then
        if [ -z "${type#ext[2-4]}" ] && \
                ! printf '%s' "$options" | tr , '\n' | \
                    grep -qFx -e barrier=0 -e nobarrier; then
            mount -o remount,nobarrier "$mountpoint"
            BARRIER="$mountpoint"
        fi
        get_cryptroot "$device"
        break
    fi
done </proc/mounts

#renice -20 -p $$ >/dev/null
#
#excl_pid=$(ps -o ppid= --pid $$) # XXX when used in openvt
#excl_pid=$(pgrep -f /bin/login | head -n 1) # XXX
#PIDLIST=
#PIDLIST2=1
#while :; do
#    PIDLIST2="$(ps -o pid= --ppid $PIDLIST2 | grep -v "^\s*$excl_pid\s*$")" || break
#    PIDLIST="$PIDLIST $PIDLIST2"
#    PIDLIST2=$(printf '%s' "$PIDLIST2" | sed -nr ':x; s/\s*//; 1h; 1!H; $!{n;bx}; x; y/\n/,/; p')
#done
#
#kill -STOP $PIDLIST

# change into ramdisk
chroot "$INITRAMFS_DIR" /bin/sh -c "
    # suspend
    /bin/cryptroot-suspend $CRYPTNAME
    # continue here after suspend and re-open cryptroot
    cryptsetup luksResume $CRYPTNAME
"

# restore original barrier mount options
if [ -n "$BARRIER" ]; then
    mount -o remount,barrier "$BARRIER"
fi
