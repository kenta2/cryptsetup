#!/bin/sh

set -e
PATH=/usr/sbin:/usr/bin:/sbin:/bin
export PATH

# import cryptsetup shell functions
[ -f /lib/cryptsetup/functions ] || return 0
. /lib/cryptsetup/functions

INITRAMFS_MNT="$(mktemp -d --tmpdir=/tmp)"
INITRAMFS_MNT="$(readlink -f "$INITRAMFS_MNT")"
BIND_PATHS="/sys /proc /dev /run"
SYSTEM_SLEEP_PATH=/lib/systemd/system-sleep

# run_dir ARGS...
# Run all executable scripts in directory SYSTEM_SLEEP_PATH with arguments ARGS
# mimic systemd behavior
run_dir() {
    find "$SYSTEM_SLEEP_PATH" -type f -executable -exec "{}" "$@" ";"
}

log_error() {
    # arg1 should be message
    echo "$1" | systemd-cat -t cryptsetup-suspend -p err
    echo "$1" >&2
}

mount_initramfs() {
    local INITRAMFS=$(sed -n 's/.*BOOT_IMAGE=.*vmlinuz-\([^: ]*\).*$/\/boot\/initrd.img-\1/p' /proc/cmdline)
    if [ ! -f "$INITRAMFS" ]; then
        log_error "No initramfs found at $INITRAMFS"
        exit 1
    fi

    # we need at about 300 MB on ubuntu, 200 on debian
    # https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=34e431b0ae398fc54ea69ff85ec700722c9da773
    # XXX: Maybe we can improve this in the future by checking for available swap too
    local MEM_AVAILABLE="$(grep MemAvailable /proc/meminfo | awk '{print $2}')"
    if [ "307200" -gt "$MEM_AVAILABLE" ]; then
        log_error "Not enough RAM available"
        exit 1
    fi

    mount -t ramfs -o mode=0755 ramfs "$INITRAMFS_MNT"

    # extract initrd.img to initramfs dir
    unmkinitramfs "$INITRAMFS" "$INITRAMFS_MNT"

    # unmkinitramfs extracts microcode into folders "early*" and the actual initramfs into "main"
    if [ -d "$INITRAMFS_MNT/main" ]; then
        INITRAMFS_DIR="$INITRAMFS_MNT/main"
    else
        INITRAMFS_DIR="$INITRAMFS_MNT"
    fi

    for p in $BIND_PATHS; do
        mkdir -p -m 0755 "$INITRAMFS_DIR$p"
        mount --rbind $p "$INITRAMFS_DIR$p"
        mount --make-rslave "$INITRAMFS_DIR$p"
    done
}

umount_initramfs() {
    # recursively unmount
    umount -R "$INITRAMFS_MNT"
    rmdir "$INITRAMFS_MNT"
}

CGROUP_FREEZER=
freeze_cgroups() {
    # add all machines/containers and user cgroups
    CGROUPS="/sys/fs/cgroup/unified/machine.slice/cgroup.freeze \
        /sys/fs/cgroup/unified/user.slice/cgroup.freeze"

    # add all system cgroups but us
    CGROUPS_SYSTEM=$(find /sys/fs/cgroup/unified/system.slice/ -mindepth 2 -maxdepth 2 -name cgroup.freeze)

    # freeze all unfrozen cgroups
    for c in $CGROUPS $CGROUPS_SYSTEM; do
        local val=1
        if [ -f "$c" ]; then
            val=$(cat "$c")
        fi

        # get my second level cgroup
        MY_CGROUP=$(cat /proc/self/cgroup | grep "0::" | awk -F "/" '{print $3}')

        # dont freeze our cgroup, systemd-suspend/udevd or frozen cgroups
        # freezing udevd blocks luksResume
        if echo -n "$c" | grep -qvE "systemd-suspend|systemd-udev|$MY_CGROUP" && [ 0 -eq "$val" ]; then
            echo 1 > "$c"
            CGROUP_FREEZER="$c $CGROUP_FREEZER"
        fi
    done
}

thaw_cgroups() {
    for c in $CGROUP_FREEZER; do
       echo 0 > "$c"
    done
}

get_active_devices() {
    for m in $dm_devices; do
        [ "x$m" = "x$CRYPTTAB_NAME" ] || continue
        crypttab_parse_options --quiet
        get_crypt_type
        if [ "$CRYPTTAB_TYPE" != "luks" ]; then
            cryptsetup_message "WARNING: $CRYPTTAB_NAME: unable to suspend non-luks device"
            continue
        fi
        echo -n "$m "
        break
    done
}

# Stop udev service and prevent it to be autostarted.
# Otherwise, luksResume will hang waiting for udev, which is itself waiting
# for I/O on the root device.
udev_service() {
    systemctl "$1" systemd-udevd-control.socket
    systemctl "$1" systemd-udevd-kernel.socket
    systemctl "$1" systemd-udevd.service
}

clean_up() {
    # thaw all frozen cgroups
    thaw_cgroups

    # restart systemd-udevd
    udev_service start

    # Run post-suspend scripts
    run_dir post suspend

    umount_initramfs
}

## Main script

# check unified cgroups hierarchy
if [ ! -d /sys/fs/cgroup/unified/system.slice/ ]; then
    log_error "No unified cgroups hierarchy"
    exit 1
fi

# check that not run as user
# XXX: We should catch also cases where libpam-systemd is not installed
if cat /proc/self/cgroup | grep -q "user.slice"; then
    log_error "Don't run this script as user"
    exit 1
fi

# always thaw cgroups, re-mount filesystems and remove initramfs at the end of the script
trap clean_up EXIT

# extract temporary filesystem to switch to
mount_initramfs

# copy our binary to ramdisk
cp /lib/cryptsetup/scripts/suspend/cryptsetup-suspend "$INITRAMFS_DIR/bin/cryptsetup-suspend"

# Run pre-suspend scripts
run_dir pre suspend

# freezing of udevd was not possible, but it still blocks sometimes
udev_service stop

# get list of active crypt devices
dm_devices="$(dm_active_crypt_devices)"
devices="$(crypttab_foreach_entry get_active_devices)"

# freeze all cgroups but us
freeze_cgroups

# change into ramdisk
devices_remaining="$(chroot "$INITRAMFS_DIR" /bin/sh -c "
    # suspend active luks devices (in reverse order) and system
    /bin/cryptsetup-suspend --reverse $devices

    TABFILE=\"/cryptroot/crypttab\"
    . /lib/cryptsetup/functions

    # resume active luks devices (only initramfs devices)
    for dev in $devices; do
        unset -v CRYPTTAB_NAME \
                 CRYPTTAB_SOURCE \
                 CRYPTTAB_KEY \
                 CRYPTTAB_OPTIONS

        crypttab_find_entry --quiet \$dev
        if [ -n \"\$CRYPTTAB_SOURCE\" ]; then
            resume_device \$dev || true
        else
            # write remaining devices to stdout
            echo -n \"\$dev \"
        fi
    done
")"

# resume remaining active luks devices (non-initramfs devices)
for dev in $devices_remaining; do
    unset -v CRYPTTAB_NAME \
             CRYPTTAB_SOURCE \
             CRYPTTAB_KEY \
             CRYPTTAB_OPTIONS

    crypttab_find_entry --quiet $dev
    if [ -n "$CRYPTTAB_SOURCE" ]; then
        resume_device $dev || true
    else
        log_error "'$dev' not found in /etc/crypttab"
    fi
done
